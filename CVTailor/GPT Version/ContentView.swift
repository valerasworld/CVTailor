//
//  ContentView.swift
//  CVTailor
//
//  Created by Valery Zazulin on 09/12/24.
//

import SwiftUI
import PDFKit

// DataModel
struct DataModel {
    var firstName: String
    var lastName: String
    var position: String
    var citizenship: String
    var email: String
    var phoneNumber: String
    var links: [String]
    
    var summaryBullets: [String]
    var skillsBullets: [String]
    var experiences: [Experience]
    var educations: [Education]
    var additionalBlock: [Addition]
}

struct Experience: Identifiable {
    var id = UUID()
    var position: String
    var companyName: String
    var location: String
    var startTime: Date
    var endTime: Date
    var companyDescription: String
    var experienceBullets: [String]
}

struct Education: Identifiable, Hashable {
    var id = UUID()
    var qualification: String
    var graduation: Date
    var university: String
    var location: String
    var major: String
    var minor: String
}

struct Addition {
    var additionName: String
    var description: [String]
}

// 1Ô∏è‚É£ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
enum PageFormat {
    case a4, letter
}



func createSamplePDF(pageFormat: PageFormat) -> PDFDocument {
    
    let pdfData = NSMutableData()
    var pageWidth: CGFloat {
        switch pageFormat {
        case .a4: 595.2
        case .letter: 8.5 * 72
        }
    }
    var pageHeight: CGFloat {
        switch pageFormat {
        case .a4: 841.8
        case .letter: 11 * 72
        }
    }
    let pageRect = CGRect(
        x: 0,
        y: 0,
        width: pageWidth,
        height: pageHeight
    )
    
    // 1Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º PDF-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    UIGraphicsBeginPDFContextToData(pdfData, pageRect, nil)
    UIGraphicsBeginPDFPageWithInfo(pageRect, nil)
    
    // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    guard let context = UIGraphicsGetCurrentContext() else {
        print("–û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return PDFDocument()
    }
    
    // 3Ô∏è‚É£ –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let newPDFData = MyNewPDFData().newPDFData
    
    func findFontDescriptor(_ textKind: TextKind) -> UIFontDescriptor {
        let regularFont = UIFontDescriptor.preferredFontDescriptor(withTextStyle: .body).withDesign(.serif)!
        let boldFont = regularFont.withSymbolicTraits(.traitBold)!
        //        let italicFont = regularFont.withSymbolicTraits(.traitItalic)!
        let boldItalicTraits: UIFontDescriptor.SymbolicTraits = [.traitBold, .traitItalic] // –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        let boldItalicFont = regularFont.withSymbolicTraits(boldItalicTraits)!
        
        switch textKind {
        case .titleNoLine, .titleUnderlined, .experience, .education:
            return boldFont
        case .companyDescription:
            return boldItalicFont
        default:
            return regularFont
        }
    }
    
    func findFontSize(_ textKind: TextKind) -> CGFloat {
        switch textKind {
        case .titleNoLine, .titleUnderlined, .experience, .education:
            return 13
        default:
            return 11
        }
    }
    
    func findVerticalSpacing(_ categoryTexts: [(TextKind, String)], index: Int) -> CGFloat {
        let lastIndex = categoryTexts.count - 1
        
        guard index != lastIndex else {
            return 10
        }
        let currentTextKind = categoryTexts[index].0
        let nextTextKind = categoryTexts[index + 1].0
        
        if currentTextKind == .experience {
            return 4
        }
        if currentTextKind == .titleUnderlined {
            return 8
        }
        if currentTextKind == .shiftedBullet && nextTextKind != .shiftedBullet {
            return 8
        }
        
        return 0
    }
    
    func findTextShift(_ textKind: TextKind) -> CGFloat {
        if textKind == .shiftedBullet || textKind == .companyDescription {
            return 20
        }
        return 0
    }
    
    // 5Ô∏è‚É£ –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ–º —Å–≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    var currentY: CGFloat = 50 // 50 —Ç–æ—á–µ–∫ –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    for category in newPDFData {
        for index in 0..<category.1.count {
            let tuple = category.1[index]
            let textKind = tuple.0
            let text = tuple.1
            
            // 4Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞
            let fontDescriptor: UIFontDescriptor = findFontDescriptor(textKind)
            
            let serifFont = UIFont(
                descriptor: fontDescriptor,
                size: findFontSize(textKind)
            )
            
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = textKind == .date ? .right : .left
            
            let attributes: [NSAttributedString.Key: Any] = [
                .font: serifFont,
                .foregroundColor: UIColor.black,
                .paragraphStyle: paragraphStyle
            ]
            
            let verticalSpacing: CGFloat = findVerticalSpacing(category.1, index: index) // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –±–ª–æ–∫–∞–º–∏
            let textShift = findTextShift(textKind)
            // 6Ô∏è‚É£ –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
            let textWidth = pageWidth - 100 - textShift // –û—Ç—Å—Ç—É–ø—ã –ø–æ 50 —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã + textShift in case of shiftedBullet
            let textRect = CGRect(
                x: 50 + textShift,
                y: currentY,
                width: textWidth,
                height: .greatestFiniteMagnitude // sets an extremely large height (but not infinity) to allow text content to determine its own required size
            )
            
            let boundingBox = text.boundingRect(
                with: textRect.size,
                options: [.usesLineFragmentOrigin, .usesFontLeading], // Ensure the text layout accounts for multi-line wrapping and line spacing (leading)
                attributes: attributes,
                context: nil
            )
            let textHeight = ceil(boundingBox.height) // ceil - Round UP to the nearest whole number to prevent visual artifacts and avoid clipping of text
            let adjustedRect = CGRect(
                x: 50 + textShift,
                y: currentY,
                width: textWidth,
                height: textHeight
            )
            
            // 7Ô∏è‚É£ –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
            text.draw(in: adjustedRect, withAttributes: attributes)
            
            if textKind == .titleUnderlined {
                // LINE LINE LINE LINE LINE LINE LINE
                context.setLineWidth(1)
                context.setStrokeColor(UIColor.black.cgColor)
                context.move(to: CGPoint(x: 50, y: currentY + textHeight))
                context.addLine(to: CGPoint(x: pageWidth - 50, y: currentY + textHeight))
                context.strokePath()
            }
            
            // 8Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º Y, –∞ –Ω–µ —É–º–µ–Ω—å—à–∞–µ–º)
            let isDate = textKind == .date
            currentY += isDate ? 0 : textHeight + verticalSpacing
            
        }
    }
    
    // 9Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∞–µ–º PDF-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    UIGraphicsEndPDFContext()
    
    // üîü –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º PDF-–¥–∞–Ω–Ω—ã–µ –≤ PDFDocument
    guard let document = PDFDocument(data: pdfData as Data) else {
        print("Error: Impossible to create PDFDocument from data")
        return PDFDocument()
    }
    
    return document
}

// 2Ô∏è‚É£ PDFViewer ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç PDF-–¥–æ–∫—É–º–µ–Ω—Ç
struct PDFViewer: UIViewRepresentable {
    let document: PDFDocument
    
    func makeUIView(context: Context) -> PDFView {
        let pdfView = PDFView()
        
        pdfView.autoScales = true // Automatically scales the PDF to fit the view's size
        pdfView.document = document
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        DispatchQueue.main.async {
            let initialScaleFactor = pdfView.scaleFactor
            pdfView.minScaleFactor = initialScaleFactor * 0.9 // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑—É–º (–≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ)
            pdfView.maxScaleFactor = initialScaleFactor * 2.0 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑—É–º (–≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ)
            pdfView.scaleFactor = initialScaleFactor // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±
        }
        
        return pdfView
    }
    
    func updateUIView(_ uiView: PDFView, context: Context) {}
}

// 3Ô∏è‚É£ SwiftUI ContentView –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF
struct ContentView: View {
    var body: some View {
        VStack {
            PDFViewer(document: createSamplePDF(pageFormat: .a4))
                .frame(height: 700) // –í—ã—Å–æ—Ç–∞ PDF-–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            
            Spacer()
        }
        .ignoresSafeArea()
    }
}

// 4Ô∏è‚É£ –ü—Ä–µ–≤—å—é –¥–ª—è SwiftUI
struct ContentViewViewView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}

struct MyNewPDFData {
    var newPDFData: [(Category, [(TextKind, String)])] = [
        (.personal, [
            (.titleUnderlined, "Name Surname | Professional Role"),
            (.personalInfo, "Citizenship | test@gmail.com | +1234567890 | Linkedin.com/username | Github.com/username")
        ]),
        
        (.summary, [
            (.titleUnderlined, "Summary"),
            (.bullet, "‚Ä¢ My experience in particular roles, industries, technologies, managment"),
            (.bullet, "‚Ä¢ 1-3 specific examples (results, achievements) from my experience, that are highly relevant to the vacancy")
        ]),
        
        (.skills, [
            (.titleUnderlined, "Skills"),
            (.bullet, "‚Ä¢ This stack of technologies"),
            (.bullet, "‚Ä¢ That stack of tools"),
            (.bullet, "‚Ä¢ And even used theese technologies (mention the technologies from the vacancy)")
        ]),
        
        (.experience, [
            (.titleUnderlined, "Experience"),
            (.date, "Mon YYYY ‚Äì Mon YYYY"),
            (.experience, "Position 1 | Company Name"),
            (.companyDescription, "Brief description of the company, its' main purpose and  size"),
            (.shiftedBullet, "‚Ä¢ Main responsibilities and projects you've done"),
            (.shiftedBullet, "‚Ä¢ Key results and/or achievements"),
            (.shiftedBullet, "‚Ä¢ Stack and tools you used"),
            (.date, "Mon YYYY ‚Äì Mon YYYY"),
            (.experience, "Position 2 with very very very long name\nCompany 2 with very very   very very very very long name"),
            (.companyDescription, "Brief description of the company, its' main purpose and  size"),
            (.shiftedBullet, "‚Ä¢ Main responsibilities and projects you've done"),
            (.shiftedBullet, "‚Ä¢ Key results and/or achievements"),
            (.shiftedBullet, "‚Ä¢ Stack and tools you used"),
            (.date, "Mon YYYY ‚Äì Mon YYYY"),
            (.experience, "Position 3 | Company Name"),
            (.companyDescription, "Brief description of the company, its' main purpose and  size"),
            (.shiftedBullet, "‚Ä¢ Main responsibilities and projects you've done"),
            (.shiftedBullet, "‚Ä¢ Key results and/or achievements"),
            (.shiftedBullet, "‚Ä¢ Stack and tools you used"),
        ]),
        
        (.education, [
            (.titleUnderlined, "Education"),
            (.date, "Mon YYYY ‚Äì Mon YYYY"),
            (.experience, "Position 3 | Company Name"),
            (.companyDescription, "Brief description of the company, its' main purpose and size"),
            (.shiftedBullet, "‚Ä¢ Main responsibilities and projects you've done"),
            (.shiftedBullet, "‚Ä¢ Key results and/or achievements"),
            (.shiftedBullet, "‚Ä¢ Stack and tools you used")
        ])
    ]
}

enum TextKind: Hashable {
    case titleNoLine, titleUnderlined, bullet, shiftedBullet, date, experience, education, personalInfo, companyDescription
}

enum Category: String, CaseIterable, Hashable {
    case personal = "Personal"
    case summary = "Summary"
    case skills = "Skills"
    case experience = "Experience"
    case education = "Education"
    case additional = "Additional"
}
