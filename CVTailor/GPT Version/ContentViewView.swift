////
////  ContentViewView.swift
////  CVTailor
////
////  Created by Valery Zazulin on 09/12/24.
////
//
//import SwiftUI
//import PDFKit
//
//// DataModel
//struct DataModel {
//    var firstName: String
//    var lastName: String
//    var position: String
//    var citizenship: String
//    var email: String
//    var phoneNumber: String
//    var links: [String]
//    
//    var summaryBullets: [String]
//    var skillsBullets: [String]
//    var experiences: [Experience]
//    var educations: [Education]
//    var additionalBlock: [Addition]
//}
//
//struct Experience: Identifiable {
//    var id = UUID()
//    var position: String
//    var companyName: String
//    var location: String
//    var startTime: Date
//    var endTime: Date
//    var companyDescription: String
//    var experienceBullets: [String]
//}
//
//struct Education: Identifiable, Hashable {
//    var id = UUID()
//    var qualification: String
//    var graduation: Date
//    var university: String
//    var location: String
//    var major: String
//    var minor: String
//}
//
//struct Addition {
//    var additionName: String
//    var description: [String]
//}
//
//// 1Ô∏è‚É£ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
//enum PageFormat {
//    case a4
//    case letter
//}
//
//enum Textblock {
//    case title
//    case header
//    case bullet
//    case companyDescription
//    case shiftedBullet
//}
//
//func createSamplePDF(pageFormat: PageFormat) -> PDFDocument {
//    
//    let pdfData = NSMutableData()
//    var pageWidth: CGFloat {
//        switch pageFormat {
//        case .a4: 595.2
//        case .letter: 8.5 * 72
//        }
//    }
//    var pageHeight: CGFloat {
//        switch pageFormat {
//        case .a4: 841.8
//        case .letter: 11 * 72
//        }
//    }
//    let pageRect = CGRect(x: 0, y: 0, width: pageWidth, height: pageHeight)
//    
//    // 1Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º PDF-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
//    UIGraphicsBeginPDFContextToData(pdfData, pageRect, nil)
//    UIGraphicsBeginPDFPageWithInfo(pageRect, nil)
//    
//    // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//    guard UIGraphicsGetCurrentContext() != nil else {
//        print("–û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
//        return PDFDocument()
//    }
//    
//    // 3Ô∏è‚É£ –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
//    let texts = [
//        "Hello, this is a preview of the PDF in Xcode Canvas!",
//        "This is the second block of text, which might be longer and span multiple lines.",
//        "Here is a third paragraph that demonstrates how dynamic layout works.",
//        "Here is some really long text that should span multiple lines to showcase the bounding rect calculation and how the dynamic layout ensures it all fits properly in the document."
//    ]
//    
//    // 4Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞
//    let fontDescriptor = UIFontDescriptor.preferredFontDescriptor(withTextStyle: .body).withDesign(.serif)?.withSymbolicTraits(.traitBold)
//    let serifFont = UIFont(descriptor: fontDescriptor!, size: 22)
//    let attributes: [NSAttributedString.Key: Any] = [
//        .font: serifFont,
//        .foregroundColor: UIColor.black
//    ]
//    
//    // 5Ô∏è‚É£ –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ–º —Å–≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
//    var currentY: CGFloat = 50 // 50 —Ç–æ—á–µ–∫ –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
//    let verticalSpacing: CGFloat = 12 // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –±–ª–æ–∫–∞–º–∏
//    
//    for text in texts {
//        // 6Ô∏è‚É£ –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
//        let textWidth = pageWidth - 100 // –û—Ç—Å—Ç—É–ø—ã –ø–æ 50 —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
//        let textRect = CGRect(x: 50, y: currentY, width: textWidth, height: .greatestFiniteMagnitude) // .gretFinMagn.. sets an extremely large height (but not infinity) to allow text content to determine its own required size
//        
//        let boundingBox = text.boundingRect(
//            with: textRect.size,
//            options: [.usesLineFragmentOrigin, .usesFontLeading], // Ensure the text layout accounts for multi-line wrapping and line spacing (leading)
//            attributes: attributes,
//            context: nil
//        )
//        
//        let textHeight = ceil(boundingBox.height) // ceil - Round UP to the nearest whole number to prevent visual artifacts and avoid clipping of text
//        let adjustedRect = CGRect(x: 50, y: currentY, width: textWidth, height: textHeight)
//        
//        // 7Ô∏è‚É£ –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
//        text.draw(in: adjustedRect, withAttributes: attributes)
//        
//        // 8Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º Y, –∞ –Ω–µ —É–º–µ–Ω—å—à–∞–µ–º)
//        currentY += textHeight + verticalSpacing
//    }
//    
//    // 9Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∞–µ–º PDF-–∫–æ–Ω—Ç–µ–∫—Å—Ç
//    UIGraphicsEndPDFContext()
//    
//    // üîü –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º PDF-–¥–∞–Ω–Ω—ã–µ –≤ PDFDocument
//    guard let document = PDFDocument(data: pdfData as Data) else {
//        print("Error: Impossible to create PDFDocument from data")
//        return PDFDocument()
//    }
//    
//    return document
//}
//
//// 2Ô∏è‚É£ PDFViewer ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç PDF-–¥–æ–∫—É–º–µ–Ω—Ç
//struct PDFViewer: UIViewRepresentable {
//    let document: PDFDocument
//    
//    func makeUIView(context: Context) -> PDFView {
//        let pdfView = PDFView()
//        
//        pdfView.autoScales = true // Automatically scales the PDF to fit the view's size
//        pdfView.document = document
//        
//        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
//        DispatchQueue.main.async {
//            let initialScaleFactor = pdfView.scaleFactor
//            pdfView.minScaleFactor = initialScaleFactor * 0.9 // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑—É–º (–≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ)
//            pdfView.maxScaleFactor = initialScaleFactor * 2.0 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑—É–º (–≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ)
//            pdfView.scaleFactor = initialScaleFactor // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±
//        }
//        
//        return pdfView
//    }
//    
//    func updateUIView(_ uiView: PDFView, context: Context) {}
//}
//
//// 3Ô∏è‚É£ SwiftUI ContentView –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF
//struct ContentViewView: View {
//    var body: some View {
//        VStack {
//            PDFViewer(document: createSamplePDF(pageFormat: .a4))
//                .frame(height: 700) // –í—ã—Å–æ—Ç–∞ PDF-–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
//            
//            Spacer()
//        }
//        .ignoresSafeArea()
//    }
//}
//
//// 4Ô∏è‚É£ –ü—Ä–µ–≤—å—é –¥–ª—è SwiftUI
//struct ContentViewView_Previews: PreviewProvider {
//    static var previews: some View {
//        ContentViewView()
//    }
//}
//
//
